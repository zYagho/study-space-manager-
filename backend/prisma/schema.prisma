// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Criar uma migration: yarn prisma migrate dev --name (nome da migration)
model User{
  id String @id @default(uuid()) 
  name String 
  email String  @unique
  password String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now()) @updatedAt

  @@map("users")
  
  //Usu치rio pode ter v치rias reservas.
  reserves Reserve[]
  admin Admin?
}

model Admin{
  id String @id @default(uuid())
  role String
  create_at DateTime? @default(now())
  update_at DateTime? @default(now()) @updatedAt
  
  user User @relation(fields: [user_id], references: [id])
  user_id String @unique


  @@map("admins")
}

model Reserve{
  id String @id @default(uuid())
  status Boolean

  create_at DateTime? @default(now())
  update_at DateTime? @default(now()) @updatedAt

  @@map("reservations")

  //Uma reserva precisa ser feita por um usu치rio
  user User @relation(fields: [user_id],references: [id], onDelete: Cascade)
  user_id String

  reserveRoomTime ReserveRoomTime[]

}

model Time{
  id String @id @default(uuid())
  horaInicio String
  horaFim String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now()) @updatedAt

  @@map("times")
  reserveRoomTime ReserveRoomTime[]
}

model ReserveRoomTime{
  id String  @id @default(uuid())
  status Boolean
  reserveDay DateTime
  create_at DateTime? @default(now())
  update_at DateTime? @default(now()) @updatedAt

  @@map("room_reservations_schedule")

  room Room @relation(fields: [room_id], references: [id])
  room_id String

  time Time @relation(fields: [time_id], references: [id])
  time_id String

  reserve Reserve @relation(fields: [reserve_id], references: [id])
  reserve_id String
}

model Room{
  id String @id @default(uuid())
  number Int
  status Boolean
  create_at DateTime? @default(now())
  update_at DateTime? @default(now()) @updatedAt

  @@map("rooms")
  //Uma sala pode ter v치rias reservas.
  reserveRoomTime ReserveRoomTime[]

}